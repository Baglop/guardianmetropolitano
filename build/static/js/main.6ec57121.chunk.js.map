{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","visible","viewSelected","react_default","a","createElement","src","crossorigin","rel","href","integrity","className","Row","noGutters","Col","lg","dist","google","zoom","initialCenter","lat","lng","onClick","onMarkerClick","name","num","setState","console","log","_this2","style","backgroundColor","width","height","Nav","fill","defaultActiveKey","variant","Link","eventKey","onSelect","changeView","disabled","logo","alt","target","Container","padding","margin","fluid","scripts","_renderSideBar","_renderHome","_renderMap","Component","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ec57121.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Container, Row, Col, Button, Nav } from 'react-bootstrap';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nimport './App.css';\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      visible: false,\n      viewSelected: 1\n    }\n  }\n\n  scripts(){\n    return(\n      <head>\n      <script src=\"https://unpkg.com/react/umd/react.production.js\" crossorigin />\n\n        <script\n          src=\"https://unpkg.com/react-dom/umd/react-dom.production.js\"\n          crossorigin\n        />\n\n        <script\n          src=\"https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js\"\n          crossorigin\n        />\n\n        <script>var Alert = ReactBootstrap.Alert;</script>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n          crossorigin=\"anonymous\"\n        />\n        </head>\n    );\n  }\n\n  _renderMap(){\n    return(\n      <div className=\"App-header\">\n        <Row noGutters={true}>\n          <Col lg={9}>\n            <div className=\"map\">\n              <Map google={this.props.google} zoom={13} initialCenter={{\n                  lat: 20.663609,\n                  lng: -103.348982\n                }} >\n        \n                <Marker onClick={this.onMarkerClick}\n                        name={'Current location'} />\n        \n                <InfoWindow>\n                    <div>\n                      <h1>oli</h1>\n                    </div>\n                </InfoWindow>\n              </Map>\n            </div>\n          </Col>\n          <Col lg={3}>\n            <div className=\"stats\">\n              <p>test</p>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  changeView(num){\n    this.setState({viewSelected:num})\n    console.log(this.state.viewSelected)\n  }\n\n  _renderSideBar(){\n    return (\n        <div style={{backgroundColor:'#37383c'}} >\n          <div className=\"logoSide\">\n            <img src=\"./img/Ojo_Metropolitano_Logo.PNG\" width={64} height={64} />\n          </div>\n          <hr/>\n          <Nav fill defaultActiveKey=\"link-1\" className=\"flex-column\" variant=\"pills\">\n            <Nav.Link eventKey=\"link-1\"onSelect={() => this.changeView(1)}>Inicio</Nav.Link>\n            <Nav.Link eventKey=\"link-2\" onSelect={() => this.changeView(2)} >Map</Nav.Link>\n            <Nav.Link eventKey=\"link-3\">Link</Nav.Link>\n            <Nav.Link eventKey=\"disabled\" disabled>\n              Disabled\n            </Nav.Link>\n          </Nav>\n        </div>\n    );\n  }\n  \n  _renderHome() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <p>Oli</p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n\nrender(){\n  return(\n    <Container style={{ padding: 0, margin: 0 }} fluid={true}>\n        {this.scripts()}\n        <Row noGutters={true}>\n            {this._renderSideBar()}\n          <Col>\n          { this.state.viewSelected === 1 ? this._renderHome():this._renderMap()}\n          </Col>\n        </Row>\n      </Container>\n  );\n}\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyCjHyW6npZt7iB0RCIzI-XGdrYMMhi9tSY\")\n})(App);\n\n//export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}